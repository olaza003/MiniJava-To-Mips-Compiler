//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Represents a grammar choice, e.g. ( A | B )
 * for which grammar
 * 0: A,C |- c:int [IntegerLiteral]
 * 1: A,C |- true:bool [TrueLiteral]
 * 2: A,C |- false:bool [FalseLiteral]
 * 3: id in dom(a) -> A,C |- id:A(id) [identifier]
 * 4: A,C |- this:C [ThisExpression]
 * 5: A,C |- e:int -> A,C |- new int[2]:[int] [ArrayAllocExpress]
 * 6: A,C |- new id():id [AllocExpression]
 * 7: A,C |- e:bool -> A,C |- !e:bool [nonExpression]
 * 8: A,C |- e:t -> A,C |- (e):t [BracketExpression]
 */
public class NodeChoice implements Node {
   public NodeChoice(Node node) {
      this(node, -1);
   }

   public NodeChoice(Node node, int whichChoice) {
      choice = node;
      which = whichChoice;
   }

   public void accept(visitor.Visitor v) {
      choice.accept(v);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return choice.accept(v,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return choice.accept(v);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      choice.accept(v,argu);
   }

   public Node choice;
   public int which;
}

